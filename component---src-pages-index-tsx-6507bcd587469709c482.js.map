{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Seo.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Header.tsx","webpack:///./src/components/Layout.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_Seo__WEBPACK_IMPORTED_MODULE_2__","IndexPage","title","keywords","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","createElement","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","string","isRequired","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","a","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","StaticQueryContext","createContext","StaticQuery","props","react_default","Consumer","staticQueryData","query","render","children","object","func","StyledHeader","styled","header","_templateObject","Link","_Link","_templateObject2","Wrapper","div","_templateObject3","Header","siteTitle","react","style","margin","to","Main","main","Layout_templateObject","Layout_templateObject2","Layout","gatsby_browser_entry_StaticQuery","Layout_Wrapper","components_Header","_755544856"],"mappings":"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","file":"component---src-pages-index-tsx-6507bcd587469709c482.js","sourcesContent":["import * as React from 'react'\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title='Home' keywords={[`gatsby`, `application`, `react`]} />\n    <h2>This my personal web page</h2>\n  </Layout>\n)\n\nexport default IndexPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype Props = {\n  description?: string;\n  lang?: string;\n  meta?: Array<object>;\n  keywords?: Array<string>;\n  title: string;\n}\n\nconst SEO = ({ description, lang, meta, keywords, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import * as React from 'react';\nimport { Link as _Link } from 'gatsby';\nimport styled from 'styled-components';\n\ntype Props = {\n  siteTitle: string;\n}\n\nconst StyledHeader = styled.header`\n  margin-bottom: '1.45rem';\n  border-bottom: 2px dashed #b5e853;\n`;\n\nconst Link = styled(_Link)`\n  color: #b5e853;\n`;\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 960px;\n  padding: 1.45rem 1.0875rem;\n`;\n\nconst Header = ({ siteTitle }: Props) => (\n  <StyledHeader>\n    <Wrapper>\n      <h2 style={{ margin: 0 }}>\n        <Link\n          to='/'\n        >\n          {`./ ${siteTitle}`}\n        </Link>\n      </h2>\n    </Wrapper>\n  </StyledHeader>\n)\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import * as React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\";\nimport styled from 'styled-components';\n\nimport Header from \"./Header\"\nimport \"./layout.css\"\n\nconst Main = styled.main`\n  margin: 30px auto;\n  max-width: 960px;\n  padding: 0px 1.0875rem 1.45rem;\n  padding-top: 0;\n`;\n\nconst Wrapper = styled.div``;\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <Wrapper>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Main>{children}</Main>\n      </Wrapper>\n    )}\n  />\n)\n\nexport default Layout\n"],"sourceRoot":""}